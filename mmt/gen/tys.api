syntax = "v1"

type Pagination {
	Page     int   `json:"page"`
	PageSize int   `json:"pageSize"`
	Total    int64 `json:"total"`
}

type NoneRes struct {}

type (
	LoginReq {
		UserName string `json:"username"`
		PassWord string `json:"password"`
	}
	LoginRes {
		Info         interface{} `json:"info"`
		AccessToken  string      `json:"accessToken"`
		AccessExpire int64       `json:"accessExpire"`
		RefreshAfter int64       `json:"refreshAfter"`
	}
)
type (
	RegisterReq {
		UserName string `json:"username"`
		NickName string `json:"nickname"`
		PassWord string `json:"password"`
		Mobile   string `json:"mobile"`
		IdCard   string `json:"idcard,optional"`
		Email    string `json:"email,optional"`
	}
	RegisterRes {
		RegisterReq RegisterReq `json:"info"`
	}
)

type (
	GetUserListReq {
		Page     int    `json:"page"`
		PageSize int    `json:"pageSize"`
		UserName string `json:"username,optional"`
		NickName string `json:"nickname,optional"`
		PassWord string `json:"password,optional"`
		Mobile   string `json:"mobile,optional"`
		IdCard   string `json:"idcard,optional"`
		Email    string `json:"email,optional"`
	}

	GetUserListRes {
		Info interface{} `json:"info"`
		Pagination
	}
)

type (
	DeleteUserReq {
		Id uint `path:"id"`
	}
)
type (
	UpdateReq {
		Id       uint   `json:"id"`
		UserName string `json:"username,optional"`
		NickName string `json:"nickname,optional"`
		PassWord string `json:"password,optional"`
		Mobile   string `json:"mobile,optional"`
		IdCard   string `json:"idcard,optional"`
		Email    string `json:"email,optional"`
	}
)
type (
	GetUserByIdReq {
		Id uint `path:"id"`
	}
	GetUserByIdRes {
		Data interface{} `json:"info"`
	}
)
// ----------------  application  ----------------
type (
	CreateApplication {
		Name string
	}
)